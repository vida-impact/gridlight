image: "python:3.8-buster"

stages:
  - tox
  - Documentation
  - build
  - publish
  - update-tox-cache

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

cache: &global_cache
  paths:
    - .cache/pip
    - venv/
    - .tox
    - apt-cache/
  key: ${CI_COMMIT_REF_SLUG}

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
before_script:
  - mkdir -p apt-cache
  # libspatialindex needed for rtree: see e.g. https://github.com/Toblerity/rtree/blob/master/ci/azp/linux-1604-pip.yml
  # pandoc needed for docu, see https://nbsphinx.readthedocs.io/en/0.7.1/installation.html?highlight=pandoc#pandoc
  - apt-get update -yq && apt-get -o dir::cache::archives="$(pwd)/apt-cache" install -yq libspatialindex-dev pandoc
  - pip install virtualenv
  - virtualenv venv
  - source venv/bin/activate

tox_recreate:
  only:
    changes:
      # recreate environments if dependencies have changed
      - requirements.txt
  cache:
    <<: *global_cache
    policy: push
  stage: tox
  script:
    - apt-get install apt-transport-https ca-certificates gnupg -y
    - echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
    - curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
    - apt-get update && apt-get install -y google-cloud-sdk

    - pip install tox

    - pip install keyrings.google-artifactregistry-auth
    - echo $SERVICE_ACCOUNT | base64 -d > service-account.json

    - export GOOGLE_APPLICATION_CREDENTIALS=service-account.json
    - gcloud auth activate-service-account --project=village-data-analytics --key-file=service-account.json
    - gcloud artifacts print-settings python --repository=vida-python-registry --location=europe-west3 > tmp.txt
    - head -8 tmp.txt > ~/.pypirc
    - mkdir -p ~/.config/pip
    - tail -5 tmp.txt > ~/.config/pip/pip.conf

    - tox -r
  artifacts:
    paths:
      - badges
      - docs/_build
      - htmlcov
      - pylint.html

tox_use_cache:
  except:
    changes:
      #   use cache if environments if dependencies haven't changed
      - requirements.txt
  cache:
    <<: *global_cache
    policy: pull
  stage: tox
  script:
    - apt-get install apt-transport-https ca-certificates gnupg -y
    - echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
    - curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
    - apt-get update && apt-get install -y google-cloud-sdk

    - pip install tox

    - pip install keyrings.google-artifactregistry-auth
    - echo $SERVICE_ACCOUNT | base64 -d > service-account.json

    - export GOOGLE_APPLICATION_CREDENTIALS=service-account.json
    - gcloud auth activate-service-account --project=village-data-analytics --key-file=service-account.json
    - gcloud artifacts print-settings python --repository=vida-python-registry --location=europe-west3 > tmp.txt
    - head -8 tmp.txt > ~/.pypirc
    - mkdir -p ~/.config/pip
    - tail -5 tmp.txt > ~/.config/pip/pip.conf
    - tox
  artifacts:
    paths:
      - badges
      - docs/_build
      - htmlcov
      - pylint.html

pages:
  cache: {}
  stage: Documentation
  script:
    - mv docs/_build/html/* public/docs
    - mv pylint.html public/pylint/index.html
    - mv htmlcov/* public/coverage
  artifacts:
    paths:
      - public
  only:
    - develop


# <--- BEGIN GCP ARTIFACT - PYTHON --->

package:
  cache:
    paths:
      - .cache/pip
      - venv/
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
  stage: build
  script:
    - |
      # Bump version number of develop branch
      if [ "$CI_COMMIT_BRANCH" = "develop" ]; then
        # Git config
        git config user.name "Igor Ginoski"
        git config user.email "igor.ginoski@intertec.io"

        mkdir ~/.ssh
        touch ~/.ssh/id_rsa
        touch ~/.ssh/id_rsa.pub

        echo $GITLAB_DEPLOY_KEY | base64 -d > ~/.ssh/id_rsa
        echo $GITLAB_DEPLOY_PUBLIC_KEY | base64 -d > ~/.ssh/id_rsa.pub
        chmod 0600 ~/.ssh/id_rsa
        chmod 0644 ~/.ssh/id_rsa.pub

        ls -l ~/.ssh/

        # HTTPS clone URL -> git+ssh URL for pushing

        export GIT_REPO_URL_SSH=$(echo -n $CI_REPOSITORY_URL | sed -r 's%https?://.*@([^/]+)/%git@\1:%' -)
        
        git remote set-url origin $GIT_REPO_URL_SSH

        export GIT_SSH_COMMAND='ssh -i ~/.ssh/id_rsa -o IdentitiesOnly=yes -o StrictHostKeyChecking=no'


        echo "install bump2version"
        pip install bump2version

        echo "run bump2version"
        bump2version build --commit

        echo "push new version"
        GIT_SSH_COMMAND='ssh -i ~/.ssh/id_rsa -o IdentitiesOnly=yes -o StrictHostKeyChecking=no' git push -o ci.skip origin HEAD:develop
      fi
    - pip install setuptools wheel
    - python setup.py sdist bdist_wheel
  artifacts:
    paths:
      - dist/*.tar.gz
      - dist/*.whl


publish_python_package:
  stage: publish
  image: google/cloud-sdk
  needs: [package]
  script:
    # keyrings needed for authentication with GCP
    - pip install twine keyrings.google-artifactregistry-auth
    - echo $SERVICE_ACCOUNT | base64 -d > service-account.json

    - export GOOGLE_APPLICATION_CREDENTIALS=service-account.json
    - gcloud auth activate-service-account --project=village-data-analytics --key-file=service-account.json
    - gcloud artifacts print-settings python --repository=vida-python-registry --location=europe-west3 > tmp.txt
    - head -8 tmp.txt > ~/.pypirc
    - mkdir -p ~/.config/pip
    - tail -5 tmp.txt > ~/.config/pip/pip.conf

    - twine upload --repository-url https://europe-west3-python.pkg.dev/village-data-analytics/vida-python-registry/ --skip-existing dist/* --verbose

# <--- END GCP ARTIFACT - PYTHON --->


update_tox_cache:
  needs: []
  except:
    changes:
      - requirements.txt
  when: manual
  allow_failure: true
  cache:
    <<: *global_cache
    policy: push
  stage: update-tox-cache
  script:
    - apt-get install apt-transport-https ca-certificates gnupg -y
    - echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
    - curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
    - apt-get update && apt-get install -y google-cloud-sdk

    - pip install tox

    - pip install keyrings.google-artifactregistry-auth
    - echo $SERVICE_ACCOUNT | base64 -d > service-account.json

    - export GOOGLE_APPLICATION_CREDENTIALS=service-account.json
    - gcloud auth activate-service-account --project=village-data-analytics --key-file=service-account.json
    - gcloud artifacts print-settings python --repository=vida-python-registry --location=europe-west3 > tmp.txt
    - head -8 tmp.txt > ~/.pypirc
    - mkdir -p ~/.config/pip
    - tail -5 tmp.txt > ~/.config/pip/pip.conf

    - tox -r
